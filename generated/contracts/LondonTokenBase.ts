/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface LondonTokenBaseInterface extends utils.Interface {
  functions: {
    "_balances(address)": FunctionFragment;
    "_baseUri()": FunctionFragment;
    "_name()": FunctionFragment;
    "_owners(uint256)": FunctionFragment;
    "_payloads(uint256)": FunctionFragment;
    "addFile(string,address[])": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "artistName()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "creator()": FunctionFragment;
    "fileContents(string)": FunctionFragment;
    "fileStorage(string)": FunctionFragment;
    "files()": FunctionFragment;
    "gatewayManager()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getPayload(uint256)": FunctionFragment;
    "initialize(string,address,address,string,uint256,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "license()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "mintBatch(address[],uint256[])": FunctionFragment;
    "mintBatchWithPayload(address[],uint256[],string[])": FunctionFragment;
    "mintWithPayload(address,uint256,string)": FunctionFragment;
    "mintingManager()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "projectDescription()": FunctionFragment;
    "removeFile(string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setArtistName(string)": FunctionFragment;
    "setCollectionName(string)": FunctionFragment;
    "setDescription(string)": FunctionFragment;
    "setGatewayManager(address)": FunctionFragment;
    "setLicense(string)": FunctionFragment;
    "setMintingManager(address)": FunctionFragment;
    "setPayload(uint256,string)": FunctionFragment;
    "setRoyalties(address,uint256)": FunctionFragment;
    "setURI(string)": FunctionFragment;
    "setYear(string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "year()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_balances"
      | "_baseUri"
      | "_name"
      | "_owners"
      | "_payloads"
      | "addFile"
      | "approve"
      | "artistName"
      | "balanceOf"
      | "creator"
      | "fileContents"
      | "fileStorage"
      | "files"
      | "gatewayManager"
      | "getApproved"
      | "getPayload"
      | "initialize"
      | "isApprovedForAll"
      | "license"
      | "mint"
      | "mintBatch"
      | "mintBatchWithPayload"
      | "mintWithPayload"
      | "mintingManager"
      | "name"
      | "owner"
      | "ownerOf"
      | "projectDescription"
      | "removeFile"
      | "renounceOwnership"
      | "royaltyInfo"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setArtistName"
      | "setCollectionName"
      | "setDescription"
      | "setGatewayManager"
      | "setLicense"
      | "setMintingManager"
      | "setPayload"
      | "setRoyalties"
      | "setURI"
      | "setYear"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "year"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "_balances", values: [string]): string;
  encodeFunctionData(functionFragment: "_baseUri", values?: undefined): string;
  encodeFunctionData(functionFragment: "_name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_owners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_payloads",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addFile",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "artistName",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fileContents",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "fileStorage", values: [string]): string;
  encodeFunctionData(functionFragment: "files", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gatewayManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayload",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "license", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatchWithPayload",
    values: [string[], BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithPayload",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintingManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectDescription",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "removeFile", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setArtistName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDescription",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGatewayManager",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setLicense", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMintingManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPayload",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyalties",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setURI", values: [string]): string;
  encodeFunctionData(functionFragment: "setYear", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "year", values?: undefined): string;

  decodeFunctionResult(functionFragment: "_balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_baseUri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_owners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_payloads", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addFile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "artistName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fileContents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fileStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "files", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gatewayManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayload", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "license", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintBatchWithPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeFile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setArtistName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGatewayManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLicense", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMintingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPayload", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setYear", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "year", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "MetadataUpdate(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetadataUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface MetadataUpdateEventObject {
  _tokenId: BigNumber;
}
export type MetadataUpdateEvent = TypedEvent<
  [BigNumber],
  MetadataUpdateEventObject
>;

export type MetadataUpdateEventFilter = TypedEventFilter<MetadataUpdateEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface LondonTokenBase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LondonTokenBaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    _baseUri(overrides?: CallOverrides): Promise<[string]>;

    _name(overrides?: CallOverrides): Promise<[string]>;

    _owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    _payloads(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    addFile(
      fileName: string,
      fileStorageAddresses: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    artistName(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    creator(overrides?: CallOverrides): Promise<[string]>;

    fileContents(
      fileName: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    fileStorage(
      fileName: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    files(overrides?: CallOverrides): Promise<[string[]]>;

    gatewayManager(overrides?: CallOverrides): Promise<[string]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPayload(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      uri_: string,
      minter_: string,
      gatewayManager_: string,
      contractName_: string,
      royaltyValue_: BigNumberish,
      owner_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    license(overrides?: CallOverrides): Promise<[string]>;

    mint(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintBatch(
      to: string[],
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintBatchWithPayload(
      to: string[],
      tokenIds: BigNumberish[],
      payloads: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintWithPayload(
      to: string,
      tokenId: BigNumberish,
      payload: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintingManager(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    projectDescription(overrides?: CallOverrides): Promise<[string]>;

    removeFile(
      fileName: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    royaltyInfo(
      arg0: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
    >;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setArtistName(
      artistName_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setCollectionName(
      name_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDescription(
      description_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setGatewayManager(
      gatewayManager_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setLicense(
      license_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMintingManager(
      minter_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPayload(
      tokenId: BigNumberish,
      payload: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRoyalties(
      royaltyRecipient: string,
      royaltyValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setURI(
      newuri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setYear(
      year_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    year(overrides?: CallOverrides): Promise<[string]>;
  };

  _balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  _baseUri(overrides?: CallOverrides): Promise<string>;

  _name(overrides?: CallOverrides): Promise<string>;

  _owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  _payloads(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  addFile(
    fileName: string,
    fileStorageAddresses: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  artistName(overrides?: CallOverrides): Promise<string>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  creator(overrides?: CallOverrides): Promise<string>;

  fileContents(fileName: string, overrides?: CallOverrides): Promise<string>;

  fileStorage(fileName: string, overrides?: CallOverrides): Promise<string[]>;

  files(overrides?: CallOverrides): Promise<string[]>;

  gatewayManager(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPayload(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  initialize(
    uri_: string,
    minter_: string,
    gatewayManager_: string,
    contractName_: string,
    royaltyValue_: BigNumberish,
    owner_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  license(overrides?: CallOverrides): Promise<string>;

  mint(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintBatch(
    to: string[],
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintBatchWithPayload(
    to: string[],
    tokenIds: BigNumberish[],
    payloads: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintWithPayload(
    to: string,
    tokenId: BigNumberish,
    payload: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintingManager(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  projectDescription(overrides?: CallOverrides): Promise<string>;

  removeFile(
    fileName: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  royaltyInfo(
    arg0: BigNumberish,
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
  >;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setArtistName(
    artistName_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setCollectionName(
    name_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDescription(
    description_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setGatewayManager(
    gatewayManager_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setLicense(
    license_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMintingManager(
    minter_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPayload(
    tokenId: BigNumberish,
    payload: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRoyalties(
    royaltyRecipient: string,
    royaltyValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setURI(
    newuri: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setYear(
    year_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  year(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _baseUri(overrides?: CallOverrides): Promise<string>;

    _name(overrides?: CallOverrides): Promise<string>;

    _owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    _payloads(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    addFile(
      fileName: string,
      fileStorageAddresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    artistName(overrides?: CallOverrides): Promise<string>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    creator(overrides?: CallOverrides): Promise<string>;

    fileContents(fileName: string, overrides?: CallOverrides): Promise<string>;

    fileStorage(fileName: string, overrides?: CallOverrides): Promise<string[]>;

    files(overrides?: CallOverrides): Promise<string[]>;

    gatewayManager(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPayload(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      uri_: string,
      minter_: string,
      gatewayManager_: string,
      contractName_: string,
      royaltyValue_: BigNumberish,
      owner_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    license(overrides?: CallOverrides): Promise<string>;

    mint(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintBatch(
      to: string[],
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintBatchWithPayload(
      to: string[],
      tokenIds: BigNumberish[],
      payloads: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintWithPayload(
      to: string,
      tokenId: BigNumberish,
      payload: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintingManager(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    projectDescription(overrides?: CallOverrides): Promise<string>;

    removeFile(fileName: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royaltyInfo(
      arg0: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
    >;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setArtistName(
      artistName_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollectionName(name_: string, overrides?: CallOverrides): Promise<void>;

    setDescription(
      description_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGatewayManager(
      gatewayManager_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLicense(license_: string, overrides?: CallOverrides): Promise<void>;

    setMintingManager(
      minter_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPayload(
      tokenId: BigNumberish,
      payload: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyalties(
      royaltyRecipient: string,
      royaltyValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setURI(newuri: string, overrides?: CallOverrides): Promise<void>;

    setYear(year_: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    year(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "MetadataUpdate(uint256)"(_tokenId?: null): MetadataUpdateEventFilter;
    MetadataUpdate(_tokenId?: null): MetadataUpdateEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    _balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _baseUri(overrides?: CallOverrides): Promise<BigNumber>;

    _name(overrides?: CallOverrides): Promise<BigNumber>;

    _owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    _payloads(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addFile(
      fileName: string,
      fileStorageAddresses: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    artistName(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    creator(overrides?: CallOverrides): Promise<BigNumber>;

    fileContents(
      fileName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fileStorage(
      fileName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    files(overrides?: CallOverrides): Promise<BigNumber>;

    gatewayManager(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayload(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      uri_: string,
      minter_: string,
      gatewayManager_: string,
      contractName_: string,
      royaltyValue_: BigNumberish,
      owner_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    license(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mintBatch(
      to: string[],
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mintBatchWithPayload(
      to: string[],
      tokenIds: BigNumberish[],
      payloads: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mintWithPayload(
      to: string,
      tokenId: BigNumberish,
      payload: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mintingManager(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectDescription(overrides?: CallOverrides): Promise<BigNumber>;

    removeFile(
      fileName: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    royaltyInfo(
      arg0: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setArtistName(
      artistName_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setCollectionName(
      name_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDescription(
      description_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setGatewayManager(
      gatewayManager_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setLicense(
      license_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMintingManager(
      minter_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPayload(
      tokenId: BigNumberish,
      payload: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRoyalties(
      royaltyRecipient: string,
      royaltyValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setURI(
      newuri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setYear(
      year_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    year(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _baseUri(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _owners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _payloads(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addFile(
      fileName: string,
      fileStorageAddresses: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    artistName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fileContents(
      fileName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fileStorage(
      fileName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    files(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gatewayManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayload(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      uri_: string,
      minter_: string,
      gatewayManager_: string,
      contractName_: string,
      royaltyValue_: BigNumberish,
      owner_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    license(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintBatch(
      to: string[],
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintBatchWithPayload(
      to: string[],
      tokenIds: BigNumberish[],
      payloads: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintWithPayload(
      to: string,
      tokenId: BigNumberish,
      payload: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintingManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectDescription(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFile(
      fileName: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    royaltyInfo(
      arg0: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setArtistName(
      artistName_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setCollectionName(
      name_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDescription(
      description_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setGatewayManager(
      gatewayManager_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setLicense(
      license_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMintingManager(
      minter_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPayload(
      tokenId: BigNumberish,
      payload: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRoyalties(
      royaltyRecipient: string,
      royaltyValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setURI(
      newuri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setYear(
      year_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    year(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
