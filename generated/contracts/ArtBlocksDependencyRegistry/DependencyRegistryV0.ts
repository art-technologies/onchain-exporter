/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface DependencyRegistryV0Interface extends utils.Interface {
  functions: {
    "addDependency(bytes32,bytes32,string,string,string)": FunctionFragment;
    "addDependencyAdditionalCDN(bytes32,string)": FunctionFragment;
    "addDependencyAdditionalRepository(bytes32,string)": FunctionFragment;
    "addDependencyScript(bytes32,string)": FunctionFragment;
    "addDependencyScriptPointer(bytes32,address)": FunctionFragment;
    "addLicenseText(bytes32,string)": FunctionFragment;
    "addLicenseType(bytes32)": FunctionFragment;
    "addProjectDependencyOverride(address,uint256,bytes32)": FunctionFragment;
    "addSupportedCoreContractOverride(address)": FunctionFragment;
    "adminACLAllowed(address,address,bytes4)": FunctionFragment;
    "adminACLContract()": FunctionFragment;
    "getDependencyAdditionalCDN(bytes32,uint256)": FunctionFragment;
    "getDependencyAdditionalRepository(bytes32,uint256)": FunctionFragment;
    "getDependencyCount()": FunctionFragment;
    "getDependencyDetails(bytes32)": FunctionFragment;
    "getDependencyDetailsFromString(string)": FunctionFragment;
    "getDependencyNameAndVersion(uint256)": FunctionFragment;
    "getDependencyNameAndVersionForProject(address,uint256)": FunctionFragment;
    "getDependencyNamesAndVersions()": FunctionFragment;
    "getDependencyScript(bytes32,uint256)": FunctionFragment;
    "getDependencyScriptBytecodeAddress(bytes32,uint256)": FunctionFragment;
    "getDependencyScriptBytecodeStorageVersion(bytes32,uint256)": FunctionFragment;
    "getDependencyScriptCount(bytes32)": FunctionFragment;
    "getLicenseText(bytes32,uint256)": FunctionFragment;
    "getLicenseTextChunkCount(bytes32)": FunctionFragment;
    "getLicenseType(uint256)": FunctionFragment;
    "getLicenseTypeCount()": FunctionFragment;
    "getLicenseTypes()": FunctionFragment;
    "getSupportedCoreContract(uint256)": FunctionFragment;
    "getSupportedCoreContractCount()": FunctionFragment;
    "getSupportedCoreContracts()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isSupportedCoreContract(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeDependency(bytes32)": FunctionFragment;
    "removeDependencyAdditionalCDN(bytes32,uint256)": FunctionFragment;
    "removeDependencyAdditionalRepository(bytes32,uint256)": FunctionFragment;
    "removeDependencyLastScript(bytes32)": FunctionFragment;
    "removeLicenseLastText(bytes32)": FunctionFragment;
    "removeProjectDependencyOverride(address,uint256)": FunctionFragment;
    "removeSupportedCoreContractOverride(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "stringToBytes32(string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateCoreRegistryAddress(address)": FunctionFragment;
    "updateDependencyAdditionalCDN(bytes32,uint256,string)": FunctionFragment;
    "updateDependencyAdditionalRepository(bytes32,uint256,string)": FunctionFragment;
    "updateDependencyPreferredCDN(bytes32,string)": FunctionFragment;
    "updateDependencyPreferredRepository(bytes32,string)": FunctionFragment;
    "updateDependencyScript(bytes32,uint256,string)": FunctionFragment;
    "updateDependencyScriptPointer(bytes32,uint256,address)": FunctionFragment;
    "updateDependencyWebsite(bytes32,string)": FunctionFragment;
    "updateLicenseText(bytes32,uint256,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addDependency"
      | "addDependencyAdditionalCDN"
      | "addDependencyAdditionalRepository"
      | "addDependencyScript"
      | "addDependencyScriptPointer"
      | "addLicenseText"
      | "addLicenseType"
      | "addProjectDependencyOverride"
      | "addSupportedCoreContractOverride"
      | "adminACLAllowed"
      | "adminACLContract"
      | "getDependencyAdditionalCDN"
      | "getDependencyAdditionalRepository"
      | "getDependencyCount"
      | "getDependencyDetails"
      | "getDependencyDetailsFromString"
      | "getDependencyNameAndVersion"
      | "getDependencyNameAndVersionForProject"
      | "getDependencyNamesAndVersions"
      | "getDependencyScript"
      | "getDependencyScriptBytecodeAddress"
      | "getDependencyScriptBytecodeStorageVersion"
      | "getDependencyScriptCount"
      | "getLicenseText"
      | "getLicenseTextChunkCount"
      | "getLicenseType"
      | "getLicenseTypeCount"
      | "getLicenseTypes"
      | "getSupportedCoreContract"
      | "getSupportedCoreContractCount"
      | "getSupportedCoreContracts"
      | "initialize"
      | "isSupportedCoreContract"
      | "owner"
      | "removeDependency"
      | "removeDependencyAdditionalCDN"
      | "removeDependencyAdditionalRepository"
      | "removeDependencyLastScript"
      | "removeLicenseLastText"
      | "removeProjectDependencyOverride"
      | "removeSupportedCoreContractOverride"
      | "renounceOwnership"
      | "stringToBytes32"
      | "transferOwnership"
      | "updateCoreRegistryAddress"
      | "updateDependencyAdditionalCDN"
      | "updateDependencyAdditionalRepository"
      | "updateDependencyPreferredCDN"
      | "updateDependencyPreferredRepository"
      | "updateDependencyScript"
      | "updateDependencyScriptPointer"
      | "updateDependencyWebsite"
      | "updateLicenseText"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addDependency",
    values: [BytesLike, BytesLike, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addDependencyAdditionalCDN",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addDependencyAdditionalRepository",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addDependencyScript",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addDependencyScriptPointer",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLicenseText",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLicenseType",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addProjectDependencyOverride",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupportedCoreContractOverride",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminACLAllowed",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "adminACLContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDependencyAdditionalCDN",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDependencyAdditionalRepository",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDependencyCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDependencyDetails",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDependencyDetailsFromString",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDependencyNameAndVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDependencyNameAndVersionForProject",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDependencyNamesAndVersions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDependencyScript",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDependencyScriptBytecodeAddress",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDependencyScriptBytecodeStorageVersion",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDependencyScriptCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLicenseText",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLicenseTextChunkCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLicenseType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLicenseTypeCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLicenseTypes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedCoreContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedCoreContractCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedCoreContracts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isSupportedCoreContract",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeDependency",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDependencyAdditionalCDN",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDependencyAdditionalRepository",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDependencyLastScript",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLicenseLastText",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProjectDependencyOverride",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSupportedCoreContractOverride",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stringToBytes32",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCoreRegistryAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDependencyAdditionalCDN",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDependencyAdditionalRepository",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDependencyPreferredCDN",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDependencyPreferredRepository",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDependencyScript",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDependencyScriptPointer",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDependencyWebsite",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLicenseText",
    values: [BytesLike, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addDependency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDependencyAdditionalCDN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDependencyAdditionalRepository",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDependencyScript",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDependencyScriptPointer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLicenseText",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLicenseType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addProjectDependencyOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedCoreContractOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminACLAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminACLContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDependencyAdditionalCDN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDependencyAdditionalRepository",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDependencyCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDependencyDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDependencyDetailsFromString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDependencyNameAndVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDependencyNameAndVersionForProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDependencyNamesAndVersions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDependencyScript",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDependencyScriptBytecodeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDependencyScriptBytecodeStorageVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDependencyScriptCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLicenseText",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLicenseTextChunkCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLicenseType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLicenseTypeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLicenseTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedCoreContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedCoreContractCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedCoreContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSupportedCoreContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeDependency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDependencyAdditionalCDN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDependencyAdditionalRepository",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDependencyLastScript",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLicenseLastText",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProjectDependencyOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSupportedCoreContractOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringToBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCoreRegistryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDependencyAdditionalCDN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDependencyAdditionalRepository",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDependencyPreferredCDN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDependencyPreferredRepository",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDependencyScript",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDependencyScriptPointer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDependencyWebsite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLicenseText",
    data: BytesLike
  ): Result;

  events: {
    "CoreRegistryAddressUpdated(address)": EventFragment;
    "DependencyAdded(bytes32,bytes32,string,string,string)": EventFragment;
    "DependencyAdditionalCDNRemoved(bytes32,uint256)": EventFragment;
    "DependencyAdditionalCDNUpdated(bytes32,string,uint256)": EventFragment;
    "DependencyAdditionalRepositoryRemoved(bytes32,uint256)": EventFragment;
    "DependencyAdditionalRepositoryUpdated(bytes32,string,uint256)": EventFragment;
    "DependencyPreferredCDNUpdated(bytes32,string)": EventFragment;
    "DependencyPreferredRepositoryUpdated(bytes32,string)": EventFragment;
    "DependencyRemoved(bytes32)": EventFragment;
    "DependencyScriptUpdated(bytes32)": EventFragment;
    "DependencyWebsiteUpdated(bytes32,string)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LicenseTextUpdated(bytes32)": EventFragment;
    "LicenseTypeAdded(bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProjectDependencyOverrideAdded(address,uint256,bytes32)": EventFragment;
    "ProjectDependencyOverrideRemoved(address,uint256)": EventFragment;
    "SupportedCoreContractAdded(address)": EventFragment;
    "SupportedCoreContractOverrideAdded(address)": EventFragment;
    "SupportedCoreContractOverrideRemoved(address)": EventFragment;
    "SupportedCoreContractRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CoreRegistryAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DependencyAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DependencyAdditionalCDNRemoved"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DependencyAdditionalCDNUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DependencyAdditionalRepositoryRemoved"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DependencyAdditionalRepositoryUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DependencyPreferredCDNUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DependencyPreferredRepositoryUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DependencyRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DependencyScriptUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DependencyWebsiteUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LicenseTextUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LicenseTypeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProjectDependencyOverrideAdded"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProjectDependencyOverrideRemoved"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupportedCoreContractAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SupportedCoreContractOverrideAdded"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SupportedCoreContractOverrideRemoved"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SupportedCoreContractRemoved"
  ): EventFragment;
}

export interface CoreRegistryAddressUpdatedEventObject {
  coreRegistryAddress: string;
}
export type CoreRegistryAddressUpdatedEvent = TypedEvent<
  [string],
  CoreRegistryAddressUpdatedEventObject
>;

export type CoreRegistryAddressUpdatedEventFilter =
  TypedEventFilter<CoreRegistryAddressUpdatedEvent>;

export interface DependencyAddedEventObject {
  dependencyNameAndVersion: string;
  licenseType: string;
  preferredCDN: string;
  preferredRepository: string;
  website: string;
}
export type DependencyAddedEvent = TypedEvent<
  [string, string, string, string, string],
  DependencyAddedEventObject
>;

export type DependencyAddedEventFilter = TypedEventFilter<DependencyAddedEvent>;

export interface DependencyAdditionalCDNRemovedEventObject {
  dependencyNameAndVersion: string;
  additionalCDNIndex: BigNumber;
}
export type DependencyAdditionalCDNRemovedEvent = TypedEvent<
  [string, BigNumber],
  DependencyAdditionalCDNRemovedEventObject
>;

export type DependencyAdditionalCDNRemovedEventFilter =
  TypedEventFilter<DependencyAdditionalCDNRemovedEvent>;

export interface DependencyAdditionalCDNUpdatedEventObject {
  dependencyNameAndVersion: string;
  additionalCDN: string;
  additionalCDNIndex: BigNumber;
}
export type DependencyAdditionalCDNUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  DependencyAdditionalCDNUpdatedEventObject
>;

export type DependencyAdditionalCDNUpdatedEventFilter =
  TypedEventFilter<DependencyAdditionalCDNUpdatedEvent>;

export interface DependencyAdditionalRepositoryRemovedEventObject {
  dependencyNameAndVersion: string;
  additionalRepositoryIndex: BigNumber;
}
export type DependencyAdditionalRepositoryRemovedEvent = TypedEvent<
  [string, BigNumber],
  DependencyAdditionalRepositoryRemovedEventObject
>;

export type DependencyAdditionalRepositoryRemovedEventFilter =
  TypedEventFilter<DependencyAdditionalRepositoryRemovedEvent>;

export interface DependencyAdditionalRepositoryUpdatedEventObject {
  dependencyNameAndVersion: string;
  additionalRepository: string;
  additionalRepositoryIndex: BigNumber;
}
export type DependencyAdditionalRepositoryUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  DependencyAdditionalRepositoryUpdatedEventObject
>;

export type DependencyAdditionalRepositoryUpdatedEventFilter =
  TypedEventFilter<DependencyAdditionalRepositoryUpdatedEvent>;

export interface DependencyPreferredCDNUpdatedEventObject {
  dependencyNameAndVersion: string;
  preferredCDN: string;
}
export type DependencyPreferredCDNUpdatedEvent = TypedEvent<
  [string, string],
  DependencyPreferredCDNUpdatedEventObject
>;

export type DependencyPreferredCDNUpdatedEventFilter =
  TypedEventFilter<DependencyPreferredCDNUpdatedEvent>;

export interface DependencyPreferredRepositoryUpdatedEventObject {
  dependencyNameAndVersion: string;
  preferredRepository: string;
}
export type DependencyPreferredRepositoryUpdatedEvent = TypedEvent<
  [string, string],
  DependencyPreferredRepositoryUpdatedEventObject
>;

export type DependencyPreferredRepositoryUpdatedEventFilter =
  TypedEventFilter<DependencyPreferredRepositoryUpdatedEvent>;

export interface DependencyRemovedEventObject {
  dependencyNameAndVersion: string;
}
export type DependencyRemovedEvent = TypedEvent<
  [string],
  DependencyRemovedEventObject
>;

export type DependencyRemovedEventFilter =
  TypedEventFilter<DependencyRemovedEvent>;

export interface DependencyScriptUpdatedEventObject {
  dependencyNameAndVersion: string;
}
export type DependencyScriptUpdatedEvent = TypedEvent<
  [string],
  DependencyScriptUpdatedEventObject
>;

export type DependencyScriptUpdatedEventFilter =
  TypedEventFilter<DependencyScriptUpdatedEvent>;

export interface DependencyWebsiteUpdatedEventObject {
  dependencyNameAndVersion: string;
  website: string;
}
export type DependencyWebsiteUpdatedEvent = TypedEvent<
  [string, string],
  DependencyWebsiteUpdatedEventObject
>;

export type DependencyWebsiteUpdatedEventFilter =
  TypedEventFilter<DependencyWebsiteUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LicenseTextUpdatedEventObject {
  licenseType: string;
}
export type LicenseTextUpdatedEvent = TypedEvent<
  [string],
  LicenseTextUpdatedEventObject
>;

export type LicenseTextUpdatedEventFilter =
  TypedEventFilter<LicenseTextUpdatedEvent>;

export interface LicenseTypeAddedEventObject {
  licenseType: string;
}
export type LicenseTypeAddedEvent = TypedEvent<
  [string],
  LicenseTypeAddedEventObject
>;

export type LicenseTypeAddedEventFilter =
  TypedEventFilter<LicenseTypeAddedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProjectDependencyOverrideAddedEventObject {
  coreContractAddress: string;
  projectId: BigNumber;
  dependencyNameAndVersion: string;
}
export type ProjectDependencyOverrideAddedEvent = TypedEvent<
  [string, BigNumber, string],
  ProjectDependencyOverrideAddedEventObject
>;

export type ProjectDependencyOverrideAddedEventFilter =
  TypedEventFilter<ProjectDependencyOverrideAddedEvent>;

export interface ProjectDependencyOverrideRemovedEventObject {
  coreContractAddress: string;
  projectId: BigNumber;
}
export type ProjectDependencyOverrideRemovedEvent = TypedEvent<
  [string, BigNumber],
  ProjectDependencyOverrideRemovedEventObject
>;

export type ProjectDependencyOverrideRemovedEventFilter =
  TypedEventFilter<ProjectDependencyOverrideRemovedEvent>;

export interface SupportedCoreContractAddedEventObject {
  coreContractAddress: string;
}
export type SupportedCoreContractAddedEvent = TypedEvent<
  [string],
  SupportedCoreContractAddedEventObject
>;

export type SupportedCoreContractAddedEventFilter =
  TypedEventFilter<SupportedCoreContractAddedEvent>;

export interface SupportedCoreContractOverrideAddedEventObject {
  coreContractAddress: string;
}
export type SupportedCoreContractOverrideAddedEvent = TypedEvent<
  [string],
  SupportedCoreContractOverrideAddedEventObject
>;

export type SupportedCoreContractOverrideAddedEventFilter =
  TypedEventFilter<SupportedCoreContractOverrideAddedEvent>;

export interface SupportedCoreContractOverrideRemovedEventObject {
  coreContractAddress: string;
}
export type SupportedCoreContractOverrideRemovedEvent = TypedEvent<
  [string],
  SupportedCoreContractOverrideRemovedEventObject
>;

export type SupportedCoreContractOverrideRemovedEventFilter =
  TypedEventFilter<SupportedCoreContractOverrideRemovedEvent>;

export interface SupportedCoreContractRemovedEventObject {
  coreContractAddress: string;
}
export type SupportedCoreContractRemovedEvent = TypedEvent<
  [string],
  SupportedCoreContractRemovedEventObject
>;

export type SupportedCoreContractRemovedEventFilter =
  TypedEventFilter<SupportedCoreContractRemovedEvent>;

export interface DependencyRegistryV0 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DependencyRegistryV0Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addDependency(
      dependencyNameAndVersion: BytesLike,
      licenseType: BytesLike,
      preferredCDN: string,
      preferredRepository: string,
      dependencyWebsite: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addDependencyAdditionalCDN(
      dependencyNameAndVersion: BytesLike,
      additionalCDN: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addDependencyAdditionalRepository(
      dependencyNameAndVersion: BytesLike,
      additionalRepository: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addDependencyScript(
      dependencyNameAndVersion: BytesLike,
      script: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addDependencyScriptPointer(
      dependencyNameAndVersion: BytesLike,
      scriptPointer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addLicenseText(
      licenseType: BytesLike,
      text: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addLicenseType(
      licenseType: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addProjectDependencyOverride(
      contractAddress: string,
      projectId: BigNumberish,
      dependencyNameAndVersion: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addSupportedCoreContractOverride(
      contractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminACLAllowed(
      sender: string,
      contract_: string,
      selector: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminACLContract(overrides?: CallOverrides): Promise<[string]>;

    getDependencyAdditionalCDN(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDependencyAdditionalRepository(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDependencyCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDependencyDetails(
      dependencyNameAndVersion: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        string,
        number,
        string,
        boolean,
        number
      ] & {
        nameAndVersion: string;
        licenseType: string;
        preferredCDN: string;
        additionalCDNCount: number;
        preferredRepository: string;
        additionalRepositoryCount: number;
        dependencyWebsite: string;
        availableOnChain: boolean;
        scriptCount: number;
      }
    >;

    getDependencyDetailsFromString(
      dependencyNameAndVersion: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        string,
        number,
        string,
        boolean,
        number
      ] & {
        nameAndVersion: string;
        licenseType: string;
        preferredCDN: string;
        additionalCDNCount: number;
        preferredRepository: string;
        additionalRepositoryCount: number;
        dependencyWebsite: string;
        availableOnChain: boolean;
        scriptCount: number;
      }
    >;

    getDependencyNameAndVersion(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDependencyNameAndVersionForProject(
      contractAddress: string,
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDependencyNamesAndVersions(
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getDependencyScript(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDependencyScriptBytecodeAddress(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDependencyScriptBytecodeStorageVersion(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDependencyScriptCount(
      dependencyNameAndVersion: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLicenseText(
      licenseType: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLicenseTextChunkCount(
      licenseType: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLicenseType(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLicenseTypeCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLicenseTypes(overrides?: CallOverrides): Promise<[string[]]>;

    getSupportedCoreContract(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSupportedCoreContractCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSupportedCoreContracts(overrides?: CallOverrides): Promise<[string[]]>;

    initialize(
      adminACLContract_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isSupportedCoreContract(
      coreContractAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeDependency(
      dependencyNameAndVersion: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeDependencyAdditionalCDN(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeDependencyAdditionalRepository(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeDependencyLastScript(
      dependencyNameAndVersion: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeLicenseLastText(
      licenseType: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeProjectDependencyOverride(
      contractAddress: string,
      projectId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeSupportedCoreContractOverride(
      contractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stringToBytes32(
      input: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateCoreRegistryAddress(
      _coreRegistryAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateDependencyAdditionalCDN(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      additionalCDN: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateDependencyAdditionalRepository(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      additionalRepository: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateDependencyPreferredCDN(
      dependencyNameAndVersion: BytesLike,
      preferredCDN: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateDependencyPreferredRepository(
      dependencyNameAndVersion: BytesLike,
      preferredRepository: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateDependencyScript(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      script: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateDependencyScriptPointer(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      scriptPointer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateDependencyWebsite(
      dependencyNameAndVersion: BytesLike,
      dependencyWebsite: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateLicenseText(
      licenseType: BytesLike,
      index: BigNumberish,
      text: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addDependency(
    dependencyNameAndVersion: BytesLike,
    licenseType: BytesLike,
    preferredCDN: string,
    preferredRepository: string,
    dependencyWebsite: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addDependencyAdditionalCDN(
    dependencyNameAndVersion: BytesLike,
    additionalCDN: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addDependencyAdditionalRepository(
    dependencyNameAndVersion: BytesLike,
    additionalRepository: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addDependencyScript(
    dependencyNameAndVersion: BytesLike,
    script: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addDependencyScriptPointer(
    dependencyNameAndVersion: BytesLike,
    scriptPointer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addLicenseText(
    licenseType: BytesLike,
    text: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addLicenseType(
    licenseType: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addProjectDependencyOverride(
    contractAddress: string,
    projectId: BigNumberish,
    dependencyNameAndVersion: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addSupportedCoreContractOverride(
    contractAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminACLAllowed(
    sender: string,
    contract_: string,
    selector: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminACLContract(overrides?: CallOverrides): Promise<string>;

  getDependencyAdditionalCDN(
    dependencyNameAndVersion: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getDependencyAdditionalRepository(
    dependencyNameAndVersion: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getDependencyCount(overrides?: CallOverrides): Promise<BigNumber>;

  getDependencyDetails(
    dependencyNameAndVersion: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      number,
      string,
      number,
      string,
      boolean,
      number
    ] & {
      nameAndVersion: string;
      licenseType: string;
      preferredCDN: string;
      additionalCDNCount: number;
      preferredRepository: string;
      additionalRepositoryCount: number;
      dependencyWebsite: string;
      availableOnChain: boolean;
      scriptCount: number;
    }
  >;

  getDependencyDetailsFromString(
    dependencyNameAndVersion: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      number,
      string,
      number,
      string,
      boolean,
      number
    ] & {
      nameAndVersion: string;
      licenseType: string;
      preferredCDN: string;
      additionalCDNCount: number;
      preferredRepository: string;
      additionalRepositoryCount: number;
      dependencyWebsite: string;
      availableOnChain: boolean;
      scriptCount: number;
    }
  >;

  getDependencyNameAndVersion(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getDependencyNameAndVersionForProject(
    contractAddress: string,
    projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getDependencyNamesAndVersions(overrides?: CallOverrides): Promise<string[]>;

  getDependencyScript(
    dependencyNameAndVersion: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getDependencyScriptBytecodeAddress(
    dependencyNameAndVersion: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getDependencyScriptBytecodeStorageVersion(
    dependencyNameAndVersion: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getDependencyScriptCount(
    dependencyNameAndVersion: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLicenseText(
    licenseType: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getLicenseTextChunkCount(
    licenseType: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLicenseType(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getLicenseTypeCount(overrides?: CallOverrides): Promise<BigNumber>;

  getLicenseTypes(overrides?: CallOverrides): Promise<string[]>;

  getSupportedCoreContract(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getSupportedCoreContractCount(overrides?: CallOverrides): Promise<BigNumber>;

  getSupportedCoreContracts(overrides?: CallOverrides): Promise<string[]>;

  initialize(
    adminACLContract_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isSupportedCoreContract(
    coreContractAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeDependency(
    dependencyNameAndVersion: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeDependencyAdditionalCDN(
    dependencyNameAndVersion: BytesLike,
    index: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeDependencyAdditionalRepository(
    dependencyNameAndVersion: BytesLike,
    index: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeDependencyLastScript(
    dependencyNameAndVersion: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeLicenseLastText(
    licenseType: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeProjectDependencyOverride(
    contractAddress: string,
    projectId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeSupportedCoreContractOverride(
    contractAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stringToBytes32(input: string, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateCoreRegistryAddress(
    _coreRegistryAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateDependencyAdditionalCDN(
    dependencyNameAndVersion: BytesLike,
    index: BigNumberish,
    additionalCDN: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateDependencyAdditionalRepository(
    dependencyNameAndVersion: BytesLike,
    index: BigNumberish,
    additionalRepository: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateDependencyPreferredCDN(
    dependencyNameAndVersion: BytesLike,
    preferredCDN: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateDependencyPreferredRepository(
    dependencyNameAndVersion: BytesLike,
    preferredRepository: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateDependencyScript(
    dependencyNameAndVersion: BytesLike,
    index: BigNumberish,
    script: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateDependencyScriptPointer(
    dependencyNameAndVersion: BytesLike,
    index: BigNumberish,
    scriptPointer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateDependencyWebsite(
    dependencyNameAndVersion: BytesLike,
    dependencyWebsite: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateLicenseText(
    licenseType: BytesLike,
    index: BigNumberish,
    text: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addDependency(
      dependencyNameAndVersion: BytesLike,
      licenseType: BytesLike,
      preferredCDN: string,
      preferredRepository: string,
      dependencyWebsite: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addDependencyAdditionalCDN(
      dependencyNameAndVersion: BytesLike,
      additionalCDN: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addDependencyAdditionalRepository(
      dependencyNameAndVersion: BytesLike,
      additionalRepository: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addDependencyScript(
      dependencyNameAndVersion: BytesLike,
      script: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addDependencyScriptPointer(
      dependencyNameAndVersion: BytesLike,
      scriptPointer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addLicenseText(
      licenseType: BytesLike,
      text: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addLicenseType(
      licenseType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addProjectDependencyOverride(
      contractAddress: string,
      projectId: BigNumberish,
      dependencyNameAndVersion: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addSupportedCoreContractOverride(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adminACLAllowed(
      sender: string,
      contract_: string,
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    adminACLContract(overrides?: CallOverrides): Promise<string>;

    getDependencyAdditionalCDN(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getDependencyAdditionalRepository(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getDependencyCount(overrides?: CallOverrides): Promise<BigNumber>;

    getDependencyDetails(
      dependencyNameAndVersion: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        string,
        number,
        string,
        boolean,
        number
      ] & {
        nameAndVersion: string;
        licenseType: string;
        preferredCDN: string;
        additionalCDNCount: number;
        preferredRepository: string;
        additionalRepositoryCount: number;
        dependencyWebsite: string;
        availableOnChain: boolean;
        scriptCount: number;
      }
    >;

    getDependencyDetailsFromString(
      dependencyNameAndVersion: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        string,
        number,
        string,
        boolean,
        number
      ] & {
        nameAndVersion: string;
        licenseType: string;
        preferredCDN: string;
        additionalCDNCount: number;
        preferredRepository: string;
        additionalRepositoryCount: number;
        dependencyWebsite: string;
        availableOnChain: boolean;
        scriptCount: number;
      }
    >;

    getDependencyNameAndVersion(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getDependencyNameAndVersionForProject(
      contractAddress: string,
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getDependencyNamesAndVersions(overrides?: CallOverrides): Promise<string[]>;

    getDependencyScript(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getDependencyScriptBytecodeAddress(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getDependencyScriptBytecodeStorageVersion(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getDependencyScriptCount(
      dependencyNameAndVersion: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLicenseText(
      licenseType: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getLicenseTextChunkCount(
      licenseType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLicenseType(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getLicenseTypeCount(overrides?: CallOverrides): Promise<BigNumber>;

    getLicenseTypes(overrides?: CallOverrides): Promise<string[]>;

    getSupportedCoreContract(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getSupportedCoreContractCount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupportedCoreContracts(overrides?: CallOverrides): Promise<string[]>;

    initialize(
      adminACLContract_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isSupportedCoreContract(
      coreContractAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeDependency(
      dependencyNameAndVersion: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeDependencyAdditionalCDN(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeDependencyAdditionalRepository(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeDependencyLastScript(
      dependencyNameAndVersion: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLicenseLastText(
      licenseType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeProjectDependencyOverride(
      contractAddress: string,
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSupportedCoreContractOverride(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    stringToBytes32(input: string, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCoreRegistryAddress(
      _coreRegistryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDependencyAdditionalCDN(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      additionalCDN: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDependencyAdditionalRepository(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      additionalRepository: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDependencyPreferredCDN(
      dependencyNameAndVersion: BytesLike,
      preferredCDN: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDependencyPreferredRepository(
      dependencyNameAndVersion: BytesLike,
      preferredRepository: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDependencyScript(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      script: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDependencyScriptPointer(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      scriptPointer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDependencyWebsite(
      dependencyNameAndVersion: BytesLike,
      dependencyWebsite: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLicenseText(
      licenseType: BytesLike,
      index: BigNumberish,
      text: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CoreRegistryAddressUpdated(address)"(
      coreRegistryAddress?: string | null
    ): CoreRegistryAddressUpdatedEventFilter;
    CoreRegistryAddressUpdated(
      coreRegistryAddress?: string | null
    ): CoreRegistryAddressUpdatedEventFilter;

    "DependencyAdded(bytes32,bytes32,string,string,string)"(
      dependencyNameAndVersion?: BytesLike | null,
      licenseType?: BytesLike | null,
      preferredCDN?: null,
      preferredRepository?: null,
      website?: null
    ): DependencyAddedEventFilter;
    DependencyAdded(
      dependencyNameAndVersion?: BytesLike | null,
      licenseType?: BytesLike | null,
      preferredCDN?: null,
      preferredRepository?: null,
      website?: null
    ): DependencyAddedEventFilter;

    "DependencyAdditionalCDNRemoved(bytes32,uint256)"(
      dependencyNameAndVersion?: BytesLike | null,
      additionalCDNIndex?: BigNumberish | null
    ): DependencyAdditionalCDNRemovedEventFilter;
    DependencyAdditionalCDNRemoved(
      dependencyNameAndVersion?: BytesLike | null,
      additionalCDNIndex?: BigNumberish | null
    ): DependencyAdditionalCDNRemovedEventFilter;

    "DependencyAdditionalCDNUpdated(bytes32,string,uint256)"(
      dependencyNameAndVersion?: BytesLike | null,
      additionalCDN?: null,
      additionalCDNIndex?: null
    ): DependencyAdditionalCDNUpdatedEventFilter;
    DependencyAdditionalCDNUpdated(
      dependencyNameAndVersion?: BytesLike | null,
      additionalCDN?: null,
      additionalCDNIndex?: null
    ): DependencyAdditionalCDNUpdatedEventFilter;

    "DependencyAdditionalRepositoryRemoved(bytes32,uint256)"(
      dependencyNameAndVersion?: BytesLike | null,
      additionalRepositoryIndex?: BigNumberish | null
    ): DependencyAdditionalRepositoryRemovedEventFilter;
    DependencyAdditionalRepositoryRemoved(
      dependencyNameAndVersion?: BytesLike | null,
      additionalRepositoryIndex?: BigNumberish | null
    ): DependencyAdditionalRepositoryRemovedEventFilter;

    "DependencyAdditionalRepositoryUpdated(bytes32,string,uint256)"(
      dependencyNameAndVersion?: BytesLike | null,
      additionalRepository?: null,
      additionalRepositoryIndex?: null
    ): DependencyAdditionalRepositoryUpdatedEventFilter;
    DependencyAdditionalRepositoryUpdated(
      dependencyNameAndVersion?: BytesLike | null,
      additionalRepository?: null,
      additionalRepositoryIndex?: null
    ): DependencyAdditionalRepositoryUpdatedEventFilter;

    "DependencyPreferredCDNUpdated(bytes32,string)"(
      dependencyNameAndVersion?: BytesLike | null,
      preferredCDN?: null
    ): DependencyPreferredCDNUpdatedEventFilter;
    DependencyPreferredCDNUpdated(
      dependencyNameAndVersion?: BytesLike | null,
      preferredCDN?: null
    ): DependencyPreferredCDNUpdatedEventFilter;

    "DependencyPreferredRepositoryUpdated(bytes32,string)"(
      dependencyNameAndVersion?: BytesLike | null,
      preferredRepository?: null
    ): DependencyPreferredRepositoryUpdatedEventFilter;
    DependencyPreferredRepositoryUpdated(
      dependencyNameAndVersion?: BytesLike | null,
      preferredRepository?: null
    ): DependencyPreferredRepositoryUpdatedEventFilter;

    "DependencyRemoved(bytes32)"(
      dependencyNameAndVersion?: BytesLike | null
    ): DependencyRemovedEventFilter;
    DependencyRemoved(
      dependencyNameAndVersion?: BytesLike | null
    ): DependencyRemovedEventFilter;

    "DependencyScriptUpdated(bytes32)"(
      dependencyNameAndVersion?: BytesLike | null
    ): DependencyScriptUpdatedEventFilter;
    DependencyScriptUpdated(
      dependencyNameAndVersion?: BytesLike | null
    ): DependencyScriptUpdatedEventFilter;

    "DependencyWebsiteUpdated(bytes32,string)"(
      dependencyNameAndVersion?: BytesLike | null,
      website?: null
    ): DependencyWebsiteUpdatedEventFilter;
    DependencyWebsiteUpdated(
      dependencyNameAndVersion?: BytesLike | null,
      website?: null
    ): DependencyWebsiteUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LicenseTextUpdated(bytes32)"(
      licenseType?: BytesLike | null
    ): LicenseTextUpdatedEventFilter;
    LicenseTextUpdated(
      licenseType?: BytesLike | null
    ): LicenseTextUpdatedEventFilter;

    "LicenseTypeAdded(bytes32)"(
      licenseType?: BytesLike | null
    ): LicenseTypeAddedEventFilter;
    LicenseTypeAdded(
      licenseType?: BytesLike | null
    ): LicenseTypeAddedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ProjectDependencyOverrideAdded(address,uint256,bytes32)"(
      coreContractAddress?: string | null,
      projectId?: BigNumberish | null,
      dependencyNameAndVersion?: null
    ): ProjectDependencyOverrideAddedEventFilter;
    ProjectDependencyOverrideAdded(
      coreContractAddress?: string | null,
      projectId?: BigNumberish | null,
      dependencyNameAndVersion?: null
    ): ProjectDependencyOverrideAddedEventFilter;

    "ProjectDependencyOverrideRemoved(address,uint256)"(
      coreContractAddress?: string | null,
      projectId?: BigNumberish | null
    ): ProjectDependencyOverrideRemovedEventFilter;
    ProjectDependencyOverrideRemoved(
      coreContractAddress?: string | null,
      projectId?: BigNumberish | null
    ): ProjectDependencyOverrideRemovedEventFilter;

    "SupportedCoreContractAdded(address)"(
      coreContractAddress?: string | null
    ): SupportedCoreContractAddedEventFilter;
    SupportedCoreContractAdded(
      coreContractAddress?: string | null
    ): SupportedCoreContractAddedEventFilter;

    "SupportedCoreContractOverrideAdded(address)"(
      coreContractAddress?: string | null
    ): SupportedCoreContractOverrideAddedEventFilter;
    SupportedCoreContractOverrideAdded(
      coreContractAddress?: string | null
    ): SupportedCoreContractOverrideAddedEventFilter;

    "SupportedCoreContractOverrideRemoved(address)"(
      coreContractAddress?: string | null
    ): SupportedCoreContractOverrideRemovedEventFilter;
    SupportedCoreContractOverrideRemoved(
      coreContractAddress?: string | null
    ): SupportedCoreContractOverrideRemovedEventFilter;

    "SupportedCoreContractRemoved(address)"(
      coreContractAddress?: string | null
    ): SupportedCoreContractRemovedEventFilter;
    SupportedCoreContractRemoved(
      coreContractAddress?: string | null
    ): SupportedCoreContractRemovedEventFilter;
  };

  estimateGas: {
    addDependency(
      dependencyNameAndVersion: BytesLike,
      licenseType: BytesLike,
      preferredCDN: string,
      preferredRepository: string,
      dependencyWebsite: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addDependencyAdditionalCDN(
      dependencyNameAndVersion: BytesLike,
      additionalCDN: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addDependencyAdditionalRepository(
      dependencyNameAndVersion: BytesLike,
      additionalRepository: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addDependencyScript(
      dependencyNameAndVersion: BytesLike,
      script: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addDependencyScriptPointer(
      dependencyNameAndVersion: BytesLike,
      scriptPointer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addLicenseText(
      licenseType: BytesLike,
      text: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addLicenseType(
      licenseType: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addProjectDependencyOverride(
      contractAddress: string,
      projectId: BigNumberish,
      dependencyNameAndVersion: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addSupportedCoreContractOverride(
      contractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminACLAllowed(
      sender: string,
      contract_: string,
      selector: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminACLContract(overrides?: CallOverrides): Promise<BigNumber>;

    getDependencyAdditionalCDN(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDependencyAdditionalRepository(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDependencyCount(overrides?: CallOverrides): Promise<BigNumber>;

    getDependencyDetails(
      dependencyNameAndVersion: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDependencyDetailsFromString(
      dependencyNameAndVersion: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDependencyNameAndVersion(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDependencyNameAndVersionForProject(
      contractAddress: string,
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDependencyNamesAndVersions(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDependencyScript(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDependencyScriptBytecodeAddress(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDependencyScriptBytecodeStorageVersion(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDependencyScriptCount(
      dependencyNameAndVersion: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLicenseText(
      licenseType: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLicenseTextChunkCount(
      licenseType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLicenseType(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLicenseTypeCount(overrides?: CallOverrides): Promise<BigNumber>;

    getLicenseTypes(overrides?: CallOverrides): Promise<BigNumber>;

    getSupportedCoreContract(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupportedCoreContractCount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupportedCoreContracts(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      adminACLContract_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isSupportedCoreContract(
      coreContractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeDependency(
      dependencyNameAndVersion: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeDependencyAdditionalCDN(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeDependencyAdditionalRepository(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeDependencyLastScript(
      dependencyNameAndVersion: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeLicenseLastText(
      licenseType: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeProjectDependencyOverride(
      contractAddress: string,
      projectId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeSupportedCoreContractOverride(
      contractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stringToBytes32(
      input: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateCoreRegistryAddress(
      _coreRegistryAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateDependencyAdditionalCDN(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      additionalCDN: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateDependencyAdditionalRepository(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      additionalRepository: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateDependencyPreferredCDN(
      dependencyNameAndVersion: BytesLike,
      preferredCDN: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateDependencyPreferredRepository(
      dependencyNameAndVersion: BytesLike,
      preferredRepository: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateDependencyScript(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      script: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateDependencyScriptPointer(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      scriptPointer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateDependencyWebsite(
      dependencyNameAndVersion: BytesLike,
      dependencyWebsite: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateLicenseText(
      licenseType: BytesLike,
      index: BigNumberish,
      text: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addDependency(
      dependencyNameAndVersion: BytesLike,
      licenseType: BytesLike,
      preferredCDN: string,
      preferredRepository: string,
      dependencyWebsite: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addDependencyAdditionalCDN(
      dependencyNameAndVersion: BytesLike,
      additionalCDN: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addDependencyAdditionalRepository(
      dependencyNameAndVersion: BytesLike,
      additionalRepository: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addDependencyScript(
      dependencyNameAndVersion: BytesLike,
      script: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addDependencyScriptPointer(
      dependencyNameAndVersion: BytesLike,
      scriptPointer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addLicenseText(
      licenseType: BytesLike,
      text: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addLicenseType(
      licenseType: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addProjectDependencyOverride(
      contractAddress: string,
      projectId: BigNumberish,
      dependencyNameAndVersion: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addSupportedCoreContractOverride(
      contractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminACLAllowed(
      sender: string,
      contract_: string,
      selector: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminACLContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDependencyAdditionalCDN(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDependencyAdditionalRepository(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDependencyCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDependencyDetails(
      dependencyNameAndVersion: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDependencyDetailsFromString(
      dependencyNameAndVersion: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDependencyNameAndVersion(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDependencyNameAndVersionForProject(
      contractAddress: string,
      projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDependencyNamesAndVersions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDependencyScript(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDependencyScriptBytecodeAddress(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDependencyScriptBytecodeStorageVersion(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDependencyScriptCount(
      dependencyNameAndVersion: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLicenseText(
      licenseType: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLicenseTextChunkCount(
      licenseType: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLicenseType(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLicenseTypeCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLicenseTypes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSupportedCoreContract(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportedCoreContractCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportedCoreContracts(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      adminACLContract_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isSupportedCoreContract(
      coreContractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeDependency(
      dependencyNameAndVersion: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeDependencyAdditionalCDN(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeDependencyAdditionalRepository(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeDependencyLastScript(
      dependencyNameAndVersion: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeLicenseLastText(
      licenseType: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeProjectDependencyOverride(
      contractAddress: string,
      projectId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeSupportedCoreContractOverride(
      contractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stringToBytes32(
      input: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateCoreRegistryAddress(
      _coreRegistryAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateDependencyAdditionalCDN(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      additionalCDN: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateDependencyAdditionalRepository(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      additionalRepository: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateDependencyPreferredCDN(
      dependencyNameAndVersion: BytesLike,
      preferredCDN: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateDependencyPreferredRepository(
      dependencyNameAndVersion: BytesLike,
      preferredRepository: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateDependencyScript(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      script: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateDependencyScriptPointer(
      dependencyNameAndVersion: BytesLike,
      index: BigNumberish,
      scriptPointer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateDependencyWebsite(
      dependencyNameAndVersion: BytesLike,
      dependencyWebsite: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateLicenseText(
      licenseType: BytesLike,
      index: BigNumberish,
      text: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
