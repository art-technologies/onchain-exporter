/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface FileDeployerInterface extends utils.Interface {
  functions: {
    "deploy(string[],bytes[])": FunctionFragment;
    "getBytesAddress(bytes)": FunctionFragment;
    "getDataAddresses(bytes[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "deploy" | "getBytesAddress" | "getDataAddresses"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deploy",
    values: [string[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBytesAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataAddresses",
    values: [BytesLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBytesAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataAddresses",
    data: BytesLike
  ): Result;

  events: {
    "DeployedContent(string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeployedContent"): EventFragment;
}

export interface DeployedContentEventObject {
  name: string;
  contentAddress: string;
}
export type DeployedContentEvent = TypedEvent<
  [string, string],
  DeployedContentEventObject
>;

export type DeployedContentEventFilter = TypedEventFilter<DeployedContentEvent>;

export interface FileDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FileDeployerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deploy(
      names: string[],
      contents: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getBytesAddress(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDataAddresses(
      contents: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;
  };

  deploy(
    names: string[],
    contents: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getBytesAddress(data: BytesLike, overrides?: CallOverrides): Promise<string>;

  getDataAddresses(
    contents: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  callStatic: {
    deploy(
      names: string[],
      contents: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    getBytesAddress(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getDataAddresses(
      contents: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;
  };

  filters: {
    "DeployedContent(string,address)"(
      name?: null,
      contentAddress?: null
    ): DeployedContentEventFilter;
    DeployedContent(
      name?: null,
      contentAddress?: null
    ): DeployedContentEventFilter;
  };

  estimateGas: {
    deploy(
      names: string[],
      contents: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getBytesAddress(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataAddresses(
      contents: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deploy(
      names: string[],
      contents: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getBytesAddress(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataAddresses(
      contents: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
